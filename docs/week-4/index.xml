<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Week 4 on CS61A Notes</title><link>https://cs61a.rouxl.es/docs/week-4/</link><description>Recent content in Week 4 on CS61A Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://cs61a.rouxl.es/docs/week-4/index.xml" rel="self" type="application/rss+xml"/><item><title>Recursion</title><link>https://cs61a.rouxl.es/docs/week-4/content/recursion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs61a.rouxl.es/docs/week-4/content/recursion/</guid><description>Recursion # Recursive Functions # A function is recursive if the body of the function calls itself (either directly or indirectly).
Recursive functions pretty much always lead to a base case by operating on increasingly smaller instances of the problem. A base case is the simplest case possible where a calculation can actually be done.
For example, a recursive function to sum the digits in a number can be written as below:</description></item><item><title>Tree Recursion</title><link>https://cs61a.rouxl.es/docs/week-4/content/tree-recursion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs61a.rouxl.es/docs/week-4/content/tree-recursion/</guid><description>Tree Recursion # Order of Recursive Calls # If you know the behaviour of environment diagrams, you could derive the behaviour of recursive calls.
Recaling how environment diagrams behave, a new frame is opened when a user-defined function call occurs, meaning that whenever a recursive function is called on a non-base case scenario, a new frame is opened, and that frame will be evaluated.
As a result, in a tree recursive return value (more on that later), for example recursive(3) + recursive(4), the whole value of recursive(3) is evaluated first before recursive(4) is evaluated (due to the order of operations of Python).</description></item></channel></rss>