<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Week 11 on CS61A Notes</title><link>https://cs61a.rouxl.es/docs/week-11/</link><description>Recent content in Week 11 on CS61A Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://cs61a.rouxl.es/docs/week-11/index.xml" rel="self" type="application/rss+xml"/><item><title>Scheme</title><link>https://cs61a.rouxl.es/docs/week-11/content/scheme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs61a.rouxl.es/docs/week-11/content/scheme/</guid><description>Scheme # Scheme is another programming language that CS61A can test. The reason why this is taught is not only because you make an interpreter for Scheme as your final CS61A project (where you write code in Python to essentially execute scheme code in Python - it&amp;rsquo;s really cool), but also because it&amp;rsquo;s essentially a practical way of showing that you&amp;rsquo;re able to quickly pick up other languages after you get comfortable with one.</description></item><item><title>Macros + Exceptions</title><link>https://cs61a.rouxl.es/docs/week-11/content/macros-and-exceptions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs61a.rouxl.es/docs/week-11/content/macros-and-exceptions/</guid><description>Macros # In Scheme, everything is a list. For example, (quotient 1 2) can also be seen as a Scheme list with the elements quotient, 1, and 2. What the ' operator lets us do in Scheme is create a list without evaluating certain options, then delay the evaluation until you need it later. For example:
&amp;gt;&amp;gt;&amp;gt; (define lst (list &amp;#39;quotient 1 2)) lst &amp;gt;&amp;gt;&amp;gt; lst (quotient 1 2) &amp;gt;&amp;gt;&amp;gt; (eval lst) 0.</description></item><item><title>Calculator</title><link>https://cs61a.rouxl.es/docs/week-11/content/calculator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs61a.rouxl.es/docs/week-11/content/calculator/</guid><description>Calculator Language # Compiled vs Interpreted # High Level Languages (basically languages with a lot of abstraction from machine code - essentially 1s and 0s) are typically either compiled or interpreted.
Compiling # When a program is compiled, the source code is directly translated to machine code right from the start - this code can then be distributed and run repeatedly.
Interpreted # When a program is interpreted, the source code is run directly without first compiling it.</description></item></channel></rss>