<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Week 5 on CS61A Notes</title>
    <link>https://cs61a.rouxl.es/docs/week-5/</link>
    <description>Recent content in Week 5 on CS61A Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://cs61a.rouxl.es/docs/week-5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Containers</title>
      <link>https://cs61a.rouxl.es/docs/week-5/content/containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cs61a.rouxl.es/docs/week-5/content/containers/</guid>
      <description>Containers#Lists#A list is a container that can hold a sequence of information (usually related information).
Lists can hold any Python values (not the same behaviour in every language), including other lists/objects etc.
empty = [] # empty list B = [&amp;#34;Ben&amp;#34;, &amp;#34;Box&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;Bufy&amp;#34;] # Strings numbers = [2, 5, 7] # Integers floats = [2.0, 3.5, 7.5] # Floats nested = [[2, 3], 3, 4] # Storing a list inside a list mixed = [&amp;#34;Hi&amp;#34;, 2, 3.</description>
    </item>
    
    <item>
      <title>Sequences</title>
      <link>https://cs61a.rouxl.es/docs/week-5/content/sequences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cs61a.rouxl.es/docs/week-5/content/sequences/</guid>
      <description>Sequences#Lists in Environment Diagrams#Lists can represented with box and pointer notation (similarly to functions); however, unlike functions, each element in the array has its own box, and is index labelled.
What this implies is that assigning a variable to another list will not create a copy of that list, but rather point towards the same list — this ends up being a correct assumption to make.</description>
    </item>
    
    <item>
      <title>Data Abstraction &#43; Dictionaries</title>
      <link>https://cs61a.rouxl.es/docs/week-5/content/data-abstraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cs61a.rouxl.es/docs/week-5/content/data-abstraction/</guid>
      <description>Data Abstraction#Many values in programs are compound values — a value composed of multiple values (for example coordinates, dates, or geographic positions)
By using a data abstraction, you can manipulate compound values as units without needing to worry about the way that values are stored.
Pair Abstraction#For data that is stored in pairs, we can manipulate these values using a pair data abstraction:
couple = pair(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;) a = first(couple) b = second(couple) By implementing pair() (our constructor), first(), and second() (the selectors), you can access these elements without needing to worry about how the data is stored.</description>
    </item>
    
  </channel>
</rss>
