<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Week 2 on CS61A-Notes</title>
    <link>https://cs61a.rouxl.es/docs/week-3/</link>
    <description>Recent content in Week 2 on CS61A-Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://cs61a.rouxl.es/docs/week-3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Design</title>
      <link>https://cs61a.rouxl.es/docs/week-3/content/design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cs61a.rouxl.es/docs/week-3/content/design/</guid>
      <description>Design#Abstraction#Abstraction (in a CS context) is broadly understood as extracting relevant information from other sources in order to simplify the codebase.
Abstraction by Parameterization#This is pretty much DRY (Don&amp;rsquo;t Repeat Yourself). Instead of hard-coding code that have similar structure, you could write a function that takes in parameters (arguments) which can be used to do the same thing. (Taken from CS61A Fall 2021 Design Slides)</description>
    </item>
    
  </channel>
</rss>
