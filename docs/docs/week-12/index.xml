<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Week 12 on CS61A Notes</title>
    <link>https://cs61a.rouxl.es/docs/week-12/</link>
    <description>Recent content in Week 12 on CS61A Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://cs61a.rouxl.es/docs/week-12/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Interpreters</title>
      <link>https://cs61a.rouxl.es/docs/week-12/content/interpreters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cs61a.rouxl.es/docs/week-12/content/interpreters/</guid>
      <description>Interpreting Scheme#Interpreters keep going through an evaluate/apply cycle.
Eval# Base Case  Primitive Values   Recursive Case  Evaluate(operator, operands) of call expressions Apply(procedure, arguments)    Apply# Base Case  Built in procedures   Recursive Case  User defined procedures    Scheme specific traits#Nearly everything in Scheme is a list (as mentioned countless times); additionally, nearly everything in scheme is a call expression where the operator is evaluated, then the operands are all evaluated, then these operands are applied to the operator.</description>
    </item>
    
    <item>
      <title>Tail Calls</title>
      <link>https://cs61a.rouxl.es/docs/week-12/content/tail-calls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cs61a.rouxl.es/docs/week-12/content/tail-calls/</guid>
      <description>Tail Calls#Recursion Efficiency#Let&amp;rsquo;s take a look at a recursive and iterative implementation of a factorial function and see what the efficiency of it is.
# Recursive def recursive_factorial(n): if n == 1 or n == 0: return 1 else: return n * factorial(n - 1) # Iterative def iterative_factorial(n): total = n while n &amp;gt; 0: n -= 1 total *= n return total Both of these solutions take up O(n) time, but the iterative solution reuses the variables we have, while the recursive solution needs to keep opening up frames - in fact it opens up frames an O(n) number of times, causing this to have some space efficiency issues.</description>
    </item>
    
    <item>
      <title>RegEx</title>
      <link>https://cs61a.rouxl.es/docs/week-12/content/regex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cs61a.rouxl.es/docs/week-12/content/regex/</guid>
      <description>RegEx (Regular Expression)#Declarative Languages vs Imperative Languages#RegEx is a declarative language, while Python is an Imperative language. What&amp;rsquo;s the difference?
 Imperative languages  A program is a description of computational instructions The interpreter/compiler carries out the execution as you tell it to - you (essentially) know how everything is implemented yourself   Declarative languages  A program is a statement of the desired result The interpreter will use its own algorithms to figure out how to generate the result it wants.</description>
    </item>
    
  </channel>
</rss>
