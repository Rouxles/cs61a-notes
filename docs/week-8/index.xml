<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Week 8 on CS61A Notes</title><link>https://cs61a.rouxl.es/docs/week-8/</link><description>Recent content in Week 8 on CS61A Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://cs61a.rouxl.es/docs/week-8/index.xml" rel="self" type="application/rss+xml"/><item><title>Inheritance</title><link>https://cs61a.rouxl.es/docs/week-8/content/inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs61a.rouxl.es/docs/week-8/content/inheritance/</guid><description>Inheritance # Inheritance is a powerful tool that is very often used to reduce redundant code. If you have more specific versions of a larger class, inheritance can be extremely useful. Using our Animal class from the Objects notes, we can use all its general attributes, but then add more specific classes.
class Animal: default_food = [] def __init__(self, name, energy = 100): self.name = name self.food = self.default_food[:] self.</description></item><item><title>Representation</title><link>https://cs61a.rouxl.es/docs/week-8/content/representation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs61a.rouxl.es/docs/week-8/content/representation/</guid><description>String Interpolation # This is not part of representation, but is instead an extremely useful tool to make writing strings with multiple variables far cleaner. You may have already seen me use string interpolation earlier on in the course.
In Python, the cleanest way to use string interpolation is with an f-string, where the letter f is appended before quotation marks.
f&amp;#34;&amp;#34; You can see the syntax highlighting sees the f in a different colour!</description></item><item><title>Recursive Data</title><link>https://cs61a.rouxl.es/docs/week-8/content/recursive-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs61a.rouxl.es/docs/week-8/content/recursive-data/</guid><description>Recursive Data # Linked Lists # Python lists are implemented in a way that makes inserting and deleting from the front of a list very inefficient. This is because Python implemented a list such that the first element of the list is always at the same memory location and elements in a list are located right next to each other, so when something is inserted to the start, everything gets pushed forward by one space in memory to make space for an element.</description></item></channel></rss>